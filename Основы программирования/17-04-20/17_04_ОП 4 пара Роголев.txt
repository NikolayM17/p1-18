Введение в синтаксис C++

	Типы данных

char (символьный тип данных) 1 байт
short int 		меньше int
int 		обычно 4 байт
long int		больше int
float, 		4 байта, 7 значащих цифр.
double, 		8 байт, 15 значащих цифр.

с отрицательными	signed (для int от -128 до 127
без отрицательных	unsigned          от 0 до 255)

Логический тип данных 
bool. (true/false)
Пустой тип 
void.	
не используеться для переменных

	Литералы
Целочисленные:
буква в кавычках - код буквы ’a’, тип char,
все целые числа по умолчанию типа int,
 
Числа с плавающей точкой:
все числа с точкой по умолчанию типа double,

суфиксы после значения 
L - long 	U - unsigned	UL - unsigned long
F - float	E* умножение на 10 в степени (3.0E8 — соответствует 3.0 · 10^8.)

true и false — значения типа bool.
Строки задаются в двойных кавычках: "Text string".

1. При определении переменной указывается её тип. При
определении можно сразу задать начальное значение
(инициализация).
2. Нельзя определить переменную пустого типа void.
3. Нужно всегда инициализировать переменные. (Необязательно)

	Операции
=  -  Оператор присваивания
Арифметические:
бинарные: + - * / %,
унарные: ++ --.
int k = i++; добавляет 1 после присваивания
int l = --i;	отнимает перед присваиванием
Логические:
бинарные: && || (И \ ИЛИ)
унарные: ! (НЕ)
Сравнения: == != > < >= <=.
Приведения типов: (type). (Например: 	double d = 3.1415;
				float f = (int)d;	f = 3)
Сокращённые версии бинарных
операторов: += -= *= /= %=.	(Например: a = a+3 тоже самое что и a+=3)

C++ допускает использование следующих сокращений:
unsigned вместо unsigned int,
short вместо short int,
long вместо long int.

int a = 20;
int b = 50;
double d = (double)a / b; ?// d = 0.4
double d = a / b;

Правило преобразования встроенных типов в операторах
(P.s. I - int D - double L - long F - float  S - short C - char  U - unsigned)
(P.s.s. он это С++)
1 Если D  +  I то он посчитает I как D		D + D
2 Если D + LD то он посчитает меньший из типов как больший LD + LD (для действительных чисел)
3 Если S + C то он превидет их к int I + I
4 Если I + L то он посчитает меньший из типов как больший L + L (для целых чисел)
5 Если UI  + I то он приведет I к UI   UI + UI