1.Дана структура и фрагмент кода:

struct Vector
{
    float x;
    float y;
};

int main()
{
    struct Vector vec;
    int x, y;
    //..... 
    vec.x = y;
    vec.y = y;
}

Ответ: синтаксической ошибки нет


2.Дана структура и код программы:

typedef struct Vec
{
    float x;
    float y;
} Vector;

int main()
{
    Vector vec;
    Vector * pvec
    int x, y;
    pvec = &vec;
    pvec.x = x;
    vec.y = y;
}

Ответ: компилятор выдаст ошибку, так как для доступа к атрибуту через pvec нужно использовать ->


3.Дана структура и код программы:

typedef struct Vec
{
    float x;
    float y;
} Vector;

int main()
{
    Vector vec;
    Vector * pvec
    int x, y;
    pvec->x = x;
    vec.y = y;
    printf("x: %f y: %f\n", pvec->x, vec.y);
}

Ответ: результат работы программы не определён, так как pvec не получает адреса переменной-структуры


4.Дана структура и код программы:

typedef struct Vec
{
    int x;
    int y;
} Vector;

int main()
{
    Vector vec;
    Vector * pvec
    int x, y;
    int *px;
    pvec = &vec;
    // необходимо получить адрес атрибута x
    // ...
}
Адрес атрибута x

Ответ: px = &(pvec->x);


5.Дана структура и код программы:

typedef struct Vec
{
    int x;
    int y;
} Vector;

// реализация функции
int funct(Vector *a, Vector b)
{
 // здесь должен быть код
};

При копировании из b в a правильным написанием будет

Ответ: a->x = b.x;