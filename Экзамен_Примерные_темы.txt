П1-18. Примерные вопросы.
-------------------------
1.	C. Операторы цикла for, while, do .. while. Вложенные циклы. Примеры программ и блок-схем
1.	C. Управляющие операторы. Операторы ветвления и выбора. Примеры программ и блок-схем
1.	C. Управляющие конструкции: break, continue, goto. Примеры программ и блок-схем
1.	Типы данных в языке C. Операции

1.	C++. Цикл с предусловием, с параметром, с постусловием
1.	C++. Указатели
1.	C++. Функции
1.	C++. Многомерные массивы
1.	C++. Библиотечные типы. Строки
1.	C++. Векторы
1.	C++. Классы. Методы
1.	C++. Команды прерывания цикла
1.	C++. Символьная строка в стиле C
1.	C++. Числовые типы данных. Операции
1.	С++. Поиск в неупорядоченном и упорядоченном массиве
1.  C++. Ветвление. Выбор
1.	C++. Работа с двоичными файлами
1.	С++. Модульное программирование. Структура и пример проекта.
1.	C++. Работа со структурами. Массив структур. Передача в функцию

1.	Python. Функции. Возвращаемые значения.
1.	Python. Текстовые файлы.
1.	Python. Множества
1.	Кортежи в Python
1.	Python. Строки. Функции и методы для работы со строками.
1.	Python. Списки

2.	Разработать АТД "Вектор". Дан вектор V1 целых чисел. Перенести нечетные числа в V2, четные - в V3. Отсортировать оба вектора, слить в V1. Пример <7,1,2,3,6,2> -> <1,3,7,2,2,6> 
2.	Разработать АТД "Вектор". Даны два упорядоченных по возрастанию вектора целых чисел. Слить их в один, не меняя порядка.
2.	Разработать АТД "Вектор". Даны 2 вектора целых чисел. Является ли первый вектор подпоследовательностью второго? Примеры <1,2,3>, <1,1,2,3,5> -> true <1,2,3>, <1,2,4,3,5> -> false
2.	Разработать АТД "Двусвязный список". Перегруппировать элементы двусвязного списка, переместив все элементы с нечетными значениями в конец списка (в том же порядке).
2.	Разработать АТД "Двусвязный список". Продублировать в списке все элементы с нечетными значениями (новые элементы добавлять после существующих элементов с такими же значениями)
2.	Разработать АТД "Двусвязный список". Дан список структур "Книга" [Название, Автор, год]. Вывести всю информацию по "Названию".
2.	Разработать АТД "Дек".
2.	Разработать АТД "Множество". Даны два текстовых файла. Сформировать множество букв, встречающихся в первом файле, но не встречающихся во втором.
2.	Разработать АТД "Множество". Дан массив натуральных чисел. Напечатать все цифры,  встречающиеся в записи каждого из элементов массива
2.	Разработать АТД "Множество". Даны два текстовых файла, содержащие тексты на английском языке. Вывести гласные из первого файла, не встречающиеся во втором.
2.	Разработать АТД "Очередь". Даны две непустые очереди. Очереди содержат одинаковое количество элементов. Объединить очереди в одну, в которой элементы исходных очередей чередуются (начиная с первого элемента первой очереди).
2.	Разработать АТД "Очередь". Поменять местами первый и последний элементы очереди. Все остальные элементы должны оставаться на своих местах. Разрешается использовать только функции: добавление в конец, удаление из начала, получение первого элемента без удаления, проверка на пустоту
2.	Разработать АТД "Очередь". Удалить положительные элементы из очереди. Разрешается использовать только функции: добавление в конец, удаление из начала, получение первого элемента без удаления, проверка на пустоту
2.	Разработать АТД "Список". Удалить все чётные элементы. Отпечатать список и количество удаленных элементов. Разрешается использовать функции, определенные для типа данных.
2.	Разработать АТД "Список". Список List1 содержит записи о студентах [Зачетка, Фамилия], сдающих тест. Сдача теста каждым студентом означает удаление из списка List1 и включение в список List2 с оценкой, т.е. [Зачетка, Фамилия, Оценка]. Отпечатать оба списка.
2.	Разработать АТД "Список". В списке хранится многочлен, заданный своими коэффициентами. Написать функцию нахождения производной.
2.	Разработать АТД "Стек". Разработать функцию, вычисляющую количество элементов стека, сохраняющую начальное состояние стека.
2.	Разработать АТД "Стек". Отпечатать все нечетные числа стека. Разрешается использовать только push, pop, empty. После печати стек должен сохранить свое состояние. Примечание. Воспользоваться вторым стеком.
2.	Разработать АТД "Стек". Дано 2 стека содержащие целые числа. Необходимо создать третий стек только из тех чисел, которые есть в обоих стеках. Гарантируется, что в каждом из стеков нет повторяющихся чисел. Изначальные стеки можно не сохранять. Разрешается использовать только push, pop, empty.
2.	Разработать АТД "Стек". Написать процедуру удаления элементов из стека (рекурсия)
2.	Разработать АТД "Строка". Написать функцию, возвращающую битовую строку по числу, например, 12 -> “11000”
2.	Разработать АТД "Строка". Разработать процедуру "переворачивания" строки. Рекурсия.
2.	Разработать АТД "Строка". Разработать функцию, определяющую, является ли строка палиндромом. Рекурсия.

3.	Вводится последовательность целых чисел. Отпечатать в обратном порядке. Рекурсия.
3.	Дан текстовый файл. Удалить из него все пустые строки.
3.	Дан текстовый файл. Подсчитать среднюю длину слова. Словом называется последовательность непробельных символов
3.	Дан текстовый файл, содержащий предложения. Каждое предложение заканчивается точкой. Разработать функцию, получающую на входе название файла и возвращающую среднюю длину предложения.
3.	Дан текстовый файл. Удалить из него строки, не содержащие цифр.
3.	Дана строка, состоящая из русских слов, набранных заглавными буквами и разделенных пробелами (одним или несколькими). Найти количество слов, которые начинаются и заканчиваются одной и той же буквой. Python
3.	Дана строка, состоящая из русских слов, набранных заглавными буквами и разделенных пробелами (одним или несколькими). Найти количество слов, которые начинаются и заканчиваются одной и той же буквой. Язык Си
3.	Дан файл вещественных чисел. Поменять в нем местами минимальный и максимальный элементы. Python
3.	Разработать программу для сложения чисел длиной до 256 цифр.
3.	Разработать функцию, которая на входе получает список чисел (в строковом представлении), разделенных пробелами, и возвращает сумму чисел. Python

3.	Вводится строка слов. Напечатать самое длинное слово. Язык Си
3.	Вводится последовательность целых чисел. Отпечатать в обратном порядке. Рекурсия.
3.	Дан файл вещественных чисел. Найти его первый локальный минимум (локальным минимумом называется элемент, который меньше своих соседей). Python
3.	Дан файл вещественных чисел. Создать два новых файла, первый из которых содержит элементы исходного файла с нечетными номерами (1, 3, …), а второй — с четными (2, 4, …).
3.	Дан файл вещественных чисел. Найти сумму его элементов с четными номерами.
3.	Дан файл целых чисел. Создать два новых файла, первый из которых содержит положительные числа из исходного файла (в обратном порядке), а второй — отрицательные (также в обратном порядке). Если положительные или отрицательные числа в исходном файле отсутствуют, то соответствующий результирующий файл оставить пустым.
3.	Дан файл целых чисел. Создать новый файл, содержащий те же элементы, что и исходный файл, но в обратном порядке. Python
3.	Написать функцию, принимающую целое неотрицательное число, и возвращающую "перевернутое" число. C++
3.	Написать функцию, принимающую целое неотрицательное число, и возвращающую сумму цифр. Python.
3.	Дан текстовый файл. Найти количество абзацев в тексте, если первая строка каждого абзаца начинается с 5 пробелов («красная строка»). Пустые строки между абзацами не учитывать.
3.	Дан файл целых чисел. Заменить все четные числа их квадратами. Массив и второй файл не использовать.
3.	Дан текстовый файл. Подсчитать среднюю длину слова. Словом называется последовательность непробельных символов
3.	Написать функцию, которая во входной строке удаляет слова, не содержащие гласных букв. C++.
3.	Разработать программу для сложения чисел длиной до 256 цифр.
3.	Разработать рекурсивную функцию вычисления факториала и программу для демонстрации
